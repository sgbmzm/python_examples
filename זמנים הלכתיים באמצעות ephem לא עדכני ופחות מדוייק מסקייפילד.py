#!/usr/bin/env python
# coding: utf-8

# In[1]:


# להוסיף אזימוט זריחה ושקיעה ולסדר מידע על ירח 


######## איפם מקדימה בשתי שניות את הזמנים האמיתיים נכון לאוגוסט 2022. רק ספריית סקייפילד מחשבת בדיוק על השנייה וחלקיק השנייה בגלל קבלת קובץ הנתונים מנאס"א #####


# הסברים


###חשוב מאוד: כל הביטויים כמו זריחה קודמת או זריחה הבאה וכן לגבי שקיעה וכו מושפעים מהשעה לפי שעון גריניץ###
# לכן, אם זריחה של מינוס איקס מעלות במיקום מסויים קודמת בזמן לשעה שהוגדרה באובסרבר לפי שעון גריניץ, ההגדרה של "הקודם" או "הבא" לא תהיה מדוייקת 
# כדאי לדווח על כך למפתחים



# כמה מילים על הילוך מיל:
# המיל הרומי שהיה בשימוש בארץ בתקופת חז"ל שיעורו: כאלף ארבע מאות שמונים ושניים (1482) מטרים
# לפי מפות גוגל, מהירות הליכה ממוצעת של אדם היא בין ארבעה לחמשה קמ"ש ובממוצע 4.5 קמ"ש
# גם מבדיקה אישית של מהירות ההליכה שלי, הוברר לי שהגיוני מאוד שהליכה ממוצעת היא במהירות כחמשה קמ"ש. והכוונה לאדם ההולך ממקום למקום ולא לאדם המטייל להנאתו.
# הליכה למרחק של מיל רומי במהירות חמישה קמ"ש נמשכת 17.8 דקות, ובמהירות ארבעה קמ"ש ההליכה נמשכת 22.2 דקות, והממוצע הוא 20 דקות להילוך מיל רומי.
# אבל אם נאמר שהמיל הוא אלפיים אמה ולא מיל רומי, קשה להתאים בינו לבין זמני הילוך מיל העולים מדברי התלמוד.
# לפי זה: הילוך שלושת רבעי מיל לצאת הכוכבים הוא בין 13.35 דקות לבין 16.65 דקות ובממוצע 15 דקות

####### חייבים לדעת שהזריחה והשקיעה הנראים מושפעים מתנאי מזג האויר: בעיקר מלחץ האויר והטמפרטורה #####
## עדיין יש הפרשים קטנים בין לוח עיתים לבינה לכאן, בגלל שעיתים לבינה מחשבים שעות זמניות לפי שקיעה וזריחה עם רפרקציה ולכן האופק הוא מינוס 0.783 ואני בדווקא מחשב לפי 0 ##
# ובעניין זה דעתי שלא כהכרעת הרב בורשטיין זצל בספרו "זמנים כהלכתם" פרק א נספח לסעיף ט
# את זמני צאת הכוכבים לפי השיטות השונות חישבו המחשבים לפי מספר דקות לפי הילוך מיל שמתחילים משקיעה של רפרקציה ביום בינוני שנקראת שקיעה הלכתית במישור
# אם מחשבים צאת הכוכבים לפי שקיעה גיאומטרית ביום בינוני, השיעורים קטנים יותר.


# הרב ידידיה מנת בספרו זמני ההלכה למעשה משתמש בשקיעה של סוף עיגול השמש עם רפרקציה ממוצעת -  של 47 דקות קשת שזה בעשרוני מינוס 0.7833
# זה מורכב מרפרקציה של 31 דקות קשת שזה בעשרוני 0.5166 (קצת יותר מחצי מעלה) 
# וגם מ?חצי? רדיוס שמש של 16 דקות קשת שזה בעשרוני 0.2666 (קצת יותר מרבע מעלה). בסך הכל קצת יותר משלושת רבעי מעלה
# אבל הרב צקוני בתוכנת חזון שמים מחשב שקיעה פלוס רפרקציה של סה"כ 0.833 וזה אומר שהרפרקציה עצמה היא 0.567

# מעלות 0.833 הם 50 דקות קשת וזה הנתונים הרשמיים של נאס"א במקום 47 דקות קשת שאמר הרב צקוני

# סיכום:
# לאחר שבדקתי היטב לעומק את תנאי מזג האויר בארץ לפי נתוני השירות המטאורולוגי לשנה שלמה התברר לי כדלהלן:
# לחץ אויר ממוצע בגובה פני הים בזמן הזריחה והשקיעה בכל ימות השנה (נמדד בבית דגן)  הוא 1014 מיליבר.   
# טמפרטורה ממוצעת בגובה פני הים בזמן הזריחה והשקיעה בכל ימות השנה (נמדד בבית דגן) היא 16 מעלות צלסיוס.
# ההפרשים בין התנאים הכי קיצוניים שיש בשנה לא עולים על 15 שניות הבדל לגבי זמן זריחה ושקיעה. הממוצע בתנאי מזג אויר נורמליים הוא: הבדל של שניות בודדות בין הימים. 
# רפרקציה של 0.833 משקללת מעולה את כל הנתונים האלו, והיא מתאימה לחלוטין לשימוש בארץ. ואכן, מקובל ברוב העולם להשתמש ברפרקציה זו.
# השיעור של 0.833 מעלות תחת האופק לשקיעה ולזריחה מורכב משני חלקים.
# ?חצי? רדיוס שמש שהוא מינוס 0.266 (קצת יותר מרבע מעלה), כדי להשלים את הפער שבין שקיעת מרכז השמש לשקיעת החלק העליון שלה.
# אמנם אולי איפם מחשב לחצי רדיוס שמש -0.262704
# השאר: 0.567 הוא הנתון שמחשב את הרפרקציה עצמה, וכאמור נתון זה מתאים היטב ללחץ אויר והטמפרטורה הממוצעים שיש בארץ ובעולם.

# השפעת הגובה על איחור השקיעה לפי בדיקה באפליקציית סול אט אומברה
# בגובה 0 מטר מינוס 0.833 
# בגובה 100 מטר מינוס 1.187 שזה איחור של 0.354 מעלה 
# בגובה 200 מטר מינוס 1.330 שזה איחור של 0.497 מעלה 
# בגובה 300 מטר השמש שוקעת במינוס 1.445 מעלות שזה איחור של 0.612 מעלה .
# בגובה 320 מטר שזה מגדל המים בקרית ספר ורחוב רבי עקיבא, השמש שוקעת במינוס 1.465 שזה איחור של 0.632 מעלה
# בגובה 370 מטר שזה המוצב בברכפלד וזו הנקודה הגבוהה ביותר בעיר השמש שוקעת במינוס 1.511 שזה איחור של 0.678 מעלה
# לוח עיתים לבינה טוען שרוב מוחלט של מודיעין עילית הוא בגובה בין 265 מטר לגובה 310 מטר מלבד רחוב ישועת דוד שהוא פחות
# בגובה 600 מטר מינוס 1.696 שזה איחור של 0.863 מעלה
# בגובה 900 מטר מינוס 1.888 שזה איחור של 1.055 מעלה
# בגובה 1200 מטר מינוס 2.053 שזה איחור של 1.22 מעלה
# בגובה 1500 מטר מינוס 2.194 שזה איחור של 1.361 מעלה
# רואים שהשפעת הגובה על השקיעה הכי משמעותית ב300 מטר הראשונים
# לסיכום בשלוש מאות מטר הראשונים יש קפיצה של 61 (בעיקר בגלל 100 מטר ראשונים), ובשלוש מאות מטר השניים יש קפיצה של 25, ובשלוש מאות מטר השלישיים יש קפיצה של 14
# בערך בגובה 10000 מטר השמש תיראה בשעת תחילת צאת הכוכבים
# כל זה לעניין שקיעה וזריחה ללא הסתרת הרים. במקרה, במודיעין עילית הזריחה מאוחרת בערך ב 1.5 מעלות בגלל הסתרות במקום להיות מוקדמת ב 1.5 מעלות בגלל הגובה
# לכן במודיעין עילית יש בערך איחור של 3 מעלות מהזריחה שהייתה נראית בגלל הגובה לזריחה שנראית בגלל ההסתרות
# חישבתי זריחה ושקיעה בגובה של מודיעין עילית בלי להגדיר את הגובה של מודיעין עילית ל 320. 
# עשיתי זאת ע"פ בדיקת המציאות בערך שהשמש נמצאת בשעת זריחה ושקיעה נראים במודיעין עלית בערך בגובה של 1.5 מעלות פלוס או מינוס. היינו בסה"כ כולל הרפרקציה 
# אם לא בדרך זו, היה צריך להגדיר את הגובה 320 מטר לבדוק זריחה ושקיעה ולהחזיר גובה לאפס.

# #####אבל כל זה לא נכון במציאות אלא המציאות היא כמו לוחות חי באינטרנט וכמו שראיתי בעין ולגובה 320 מטר האיחור הוא 0.522 מעלות############

########### אולי בכלל כל השקיעה בגובה לא תמיד מתקיימת בגלל תנאי מזג האויר ########
######### לכן נראה לי שאסור להסתמך על שקיעה בגובה אם לא רואים בפועל שעדיין לא שקעה השמש ##########
#---------------------------------------------------------------------------------

# יבוא חבילות נדרשות

# החבילה הכללית של איפם לחישובים אסטרונומיים
import ephem

# חבילת פי דרושה לשם המרה מרדיאנים למעלות זוית
from math import pi

# חבילה לתאריכים
import datetime
from datetime import datetime, timedelta, date

# ייבוא חבילת גמטריה לצורך התוכנית
import gematriapy as gy

# יבוא חבילת לוח עברי בפייתון
from pyluach import dates, hebrewcal, parshios

#-------------------------------------------------------------


# דוגמת אזור זמן של ישראל באיפם
from zoneinfo import ZoneInfo
from pytz import timezone
import pytz
d = ephem.Date('1997/8/9 5:13:15')
zone = timezone('Israel')
local = ephem.to_timezone(d, zone)
local


#-----------------------------------------------


# קלט תאריך לועזי שעבורו מבוקשים הזמנים, והמרתו לתאריך עברי

kelet_loazi = input("אנא הכנס תאריך לועזי (גרגוריאני) לפי הדוגמא הבאה:  19-12-2010:      ").split('-')
greg_day = int(kelet_loazi[0])
greg_month = int(kelet_loazi[1])
greg_year = int(kelet_loazi[2])

# קלט תאריך בפורמט של פיי-לוח
date_greg = dates.GregorianDate(greg_year, greg_month, greg_day)

# המרת הקלט לפורמט של פייתון דאטה-טיים
#CDD = date_greg.to_pydate()

# המרה לתאריך עברי
date_heb = date_greg.to_heb()
print("")
print(f' התאריך העברי המקביל לתאריך הלועזי שהוזן הוא: {date_heb.hebrew_date_string(True)}')
print("")
print("שימו לב!!! התאריך הלועזי מקביל לרוב שעות היום של התאריך העברי")
print("אמנם, בכל יום - החל מתחילת הלילה ועד השעה 24:00 - התאריך הלועזי מוקדם ביום אחד מהתאריך העברי")

#----------------------------------------------------------

# הגדרת משתנה שמכיל את התאריך שהמשתמש הזין עם שעה 00:01 בלילה לפי שעון גריניץ
CD = f'{greg_year}/{greg_month}/{greg_day} 00:01:00'

#--------------------------------------------------------------

# הגדרת אובייקט "אובסרבר" שמחזיק את כל המידע על מיקום ועל התאריך והשעה ועוד
city = ephem.Observer()
# הגדרת עידן כללי לדוגמא לגבי היותו של פולאריס ככוכב הצפון, בעידן שנים אחר היה/יהיה כוכב צפון אחר
#city.epoch = '2000/1/1 12:00:00'
# הגדרת תאריך ושעה למיקום מסויים. אם לא מגדירים כלום, כל הרצה של הקוד לוקחת מחדש תאריך ושעה של אותו רגע לפי שעון גריניץ
city.date = CD 
# הגדרת קו אורך של המיקום, כרגע מוגדר על מודיעין עילית-ישראל
city.lon = '35.045174'
# הגדרת קו רוחב של המיקום, כרגע מוגדר על מודיעין עילית-ישראל
city.lat = '31.941692'
# הגדרת השם של המקום שהוזן
city.name = 'modiin-illit, israel'
# הגדרת גובה המיקום מעל פני הים. אם לא מגדירים כלום ברירת המחדל היא גובה 0 בדרך כלל הגדרת גובה אמיתי מעוותת את נתוני הזריחה והשקיעה
city.elevation = 0
# הגדרת גובה מעל או מתחת לאופק. שימושי לגבי חישוב רפרקציה או לגבי חישוב צאת הכוכבים או לגבי חישוב דמדומים 
city.horizon = '0'
# הגדרת הטמפרטורה במעלות צלסיוס במיקום האובסרבר. אם לא מזינים כלום, ברירת המחדל היא 15 מעלות צלסיוס. בכוונה הזנתי 0 כדי לשלוט על הרפרקציה דרך הגדרת הוריזון
city.temp = 0
# הגדרת לחץ האויר במיליבר במיקום האובסרבר. אם לא מזינים כלום, ברירת המחדל היא 1010 מיליבר. בכוונה הזנתי 0 כדי לשלוט על הרפרקציה דרך הגדרת הוריזון
city.pressure = 0

#---------------------------------------------------------

# הגדרת השמש באיפם
s = ephem.Sun()
# קריאה לפונקציית קאפצ'ר שמחשבת כל חישובי איפם על גוף שמיימי מסויים (בדוגמא זו: על השמש) על אובייקט אובסרבר שהוגדר קודם
s.compute(city)


#-------------------------------------------------------------
# שעות זמניות

# חישוב שעות זמניות באמצעות חלוקה ל12 של הזמן מהנץ לשקיעה הגאומטריים 
# חישוב שעות זמניות מתבצע על פי זריחה ושקיעה גאומטריים כלומר זריחת ושקיעת מרכז השמש ללא שום השפעות סביבתיות
# לכן לפני שמחשבים שעות זמניות חייבים!!!! לוודא שארבעה נתונים באובסרבר של המיקום - מאופסים לאפס: גובה, אופק, טמפרטורה, ולחץ
# חשוב מאוד!!!! נתוני הזריחה והשקיעה הם בכוונה גאומטריים עבור מרכז השמש ובלי רפרקציה (אבל השקיעה והזריחה ההלכתיים הם מסוף או תחילת עיגול השמש כולל רפרקציה)

# תחילה הגדרת שני משתנים ששומרים את הזריחה הגיאומטרית ואת השקיעה הגיאומטרית
SR = ephem.localtime(city.next_rising(ephem.Sun(), use_center=True))
SS = ephem.localtime(city.next_setting(ephem.Sun(), use_center=True))


# הסברים כלליים על טיים-דלתה ועל הדפסת זמן בלי מיקרושניות
# timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)
# strftime('%d-%m-%Y, %H:%M:%S')

# הגדרת פונקצייה שמחשבת כמה שווה שעה זמנית אחת, ומה הם כל שעות היום הזמניות עבור יום מסויים
# הפונקצייה מקבלת קלט של אס-אר שזה זמן הזריחה ו- אס-אס שזה זמן השקיעה
# באופן עקרוני, לדעתי צריך לבצע חשבון זה על זריחה גיאומטרית ושקיעה גיאומטרית, ראו למעלה במבוא, וכך הגדרתי כאן את אס-אר ו אס-אס
# הפונקצייה מחזירה מערך עם 16 איברים של נתונים על שעות זמניות
def temporal_hours(SR, SS):
# התוצאה של הנוסחה הבאה היא התשובה כמה דקות שווה שעה זמנית ביום זה ושמירה במשתנה טי אייץ שזה טמפורל אוהר כלומר שעה זמנית
    TH = (((SS.hour * 60 * 60 + SS.minute * 60 + SS.second) - (SR.hour * 60 * 60 + SR.minute * 60 + SR.second)) / 60) / 12
# הגדרת אובייקט טיים-דלטה המכיל את מספר הדקות של שעה זמנית אחת עבור אותו יום השמור במשתנה טמפורל אוהר
    TD = timedelta(minutes=TH, microseconds=1)
# הגדרת משתנים של שעות זמניות. שמוגדרים כאס אר כלומר זמן הזריחה פלוס טיים-דלטה שהגדרנו קודם    
    TH0 = SR
    TH1 = SR + TD * 1
    TH2 = SR + TD * 2
    TH3 = SR + TD * 3
    TH4 = SR + TD * 4
    TH5 = SR + TD * 5
    TH6 = SR + TD * 6
    TH6_5 =  SR + TD * 6.5
    TH7 = SR + TD * 7
    TH8 = SR + TD * 8
    TH9 = SR + TD * 9
    TH9_5 =  SR + TD * 9.5
    TH10 = SR + TD * 10
    TH10_75 = SR + TD * 10.75
    TH11 = SR + TD * 11
    TH12 = SR + TD * 12
    return [TH,TH0,TH1,TH2,TH3,TH4,TH5,TH6,TH6_5,TH7,TH8,TH9,TH9_5,TH10,TH10_75,TH11,TH12]


# קריאה לפונקציית שעות זמניות ושמירת התוצאות במשתנה חדש
arr_th = temporal_hours(SR, SS)

# שמירת משתנים נפרדים לשעות זמניות, וכן מידה בדקות של שעה זמנית 
TH = round(arr_th[0], 1)
TH1 = arr_th[1]
TH2 = arr_th[2]
TH3 = arr_th[3]
TH4 = arr_th[4]
TH5 = arr_th[5]
TH6 = arr_th[6]
TH6_5 = arr_th[7]
TH7 = arr_th[8]
TH8 = arr_th[9]
TH9 = arr_th[10]
TH9_5 = arr_th[11]
TH10 = arr_th[12]
TH10_75 = arr_th[13]
TH11 = arr_th[14]
TH12 = arr_th[15]


#----------------------------------------------------------------------------

# חישובים מעלות השחר ועד הנץ לפי שיטות שונות, באמצעות הגדרת האופק לגובה המתאים

###חשוב מאוד: כל הביטויים כמו זריחה קודמת או זריחה הבאה וכן לגבי שקיעה וכו מושפעים מהשעה לפי שעון גריניץ###
# לכן, אם זריחה של מינוס איקס מעלות במיקום מסויים קודמת בזמן לשעה שהוגדרה באובסרבר לפי שעון גריניץ, ההגדרה של "הקודם" או "הבא" לא תהיה מדוייקת 
# כדאי לדווח על כך למפתחים

# הגדרת משתנים לגבהים שונים של האופק. רובם מינוס למעט אחד שהוא פלוס
HP_1_5 = '+1.5'
H_0 = '0'
H_0_783 = '-0.783'
H_0_833 = '-0.833'
H_1_37 = '-1.37'
H_3_65 = '-3.65'
H_4_239 = '-4.239'
H_4_37 = '-4.37'
H_4_61 = '-4.61'
H_6 = '-6'
H_8_5 = '-8.5'
H_10_2 = '-10.2'
H_12 = '-12'
H_15_194 = '-15.194'
H_15_99 = '-15.99'
H_16_02 = '-16.02'
H_18 = '-18'
H_19_75 = '-19.75'
H_25_9 = '-25.9'

# חישובים מעלות השחר ועד הנץ לפי שיטות שונות, באמצעות הגדרת האופק לגובה המתאים
# פונקצייה שמחשבת את הזמן ואת המיקום תחת האופק לקראת זריחה, לפי אופק שמזינים לה
# הפונקציה מחזירה מערך עם שלושה נתונים: 1. זמן האירוע המדוייק לפי שעון גריניץ. 2. גובה השמש במעלות בזמן האירוע. 3. זמן האירוע לפי שעון מקומי 
# בסופו של דבר הפונקצייה מחזירה את כל הערכים המקוריים לקדמותם, אבל במערך נשארים שמורים הנתונים של הפונקציה
def horizon_next_rise(HORIZON):
# הגדרת הזמן והמיקום. גובה האופק מוגדר לפי הקריאה לפונקציה    
    city.date = CD 
    city.elevation = 0
    city.pressure = 0
    city.horizon = HORIZON
# חישוב שעת הזריחה הבאה בשעון גריניץ לפי גובה האופק שהוגדר, הגדרת השעה המתאימה וביצוע חישובי שמש על השעה המתאימה    
    AA = city.next_rising(ephem.Sun(), use_center=True).datetime()
    city.date = AA
    s.compute(city)
    BB = round(s.alt / pi * 180.0, 3)
# איפוס השעה למצב ההתחלתי וחישוב זמן מקומי של הזריחה המבוקשת
    city.date = CD
    CC = ephem.localtime(city.next_rising(ephem.Sun(), use_center=True))
# איפוס האופק והחישוב הכללי למצב שהיה לפני הקריאה לפונקצייה    
    city.horizon = H_0
    s.compute(city)
    return [AA,BB,CC]

# חישובים מהשקיעה ועד סוף בין השמשות לפי שיטות שונות, באמצעות הגדרת האופק לגובה המתאים
# פונקצייה שמחשבת את הזמן ואת המיקום תחת האופק לאחר שקיעה, לפי אופק שמזינים לה
# הפונקציה מחזירה מערך עם שלושה נתונים: 1. זמן האירוע המדוייק לפי שעון גריניץ. 2. גובה השמש במעלות בזמן האירוע. 3. זמן האירוע לפי שעון מקומי 
# בסופו של דבר הפונקצייה מחזירה את כל הערכים המקוריים לקדמותם, אבל במערך נשארים שמורים הנתונים של הפונקציה
def horizon_next_set(HORIZON):
# הגדרת הזמן והמיקום. גובה האופק מוגדר לפי הקריאה לפונקציה     
    city.date = CD 
    city.elevation = 0
    city.pressure = 0
    city.horizon = HORIZON
# חישוב שעת השקיעה הבאה בשעון גריניץ לפי גובה האופק שהוגדר, הגדרת השעה המתאימה וביצוע חישובי שמש על השעה המתאימה    
    AA = city.next_setting(ephem.Sun(), use_center=True).datetime()
    city.date = AA
    s.compute(city)
    BB = round(s.alt / pi * 180.0, 3)
# איפוס השעה למצב ההתחלתי וחישוב זמן מקומי של השקיעה המבוקשת    
    city.date = CD
    CC = ephem.localtime(city.next_setting(ephem.Sun(), use_center=True))
# איפוס האופק והחישוב הכללי למצב שהיה לפני הקריאה לפונקצייה    
    city.horizon = H_0
    s.compute(city)    
    return [AA,BB,CC]
    

# הגדרת פונקציה שמוצאת גובה שמש בזמן מסויים לאחר שקיעה שהוגדרה.
# כשקוראים לפונקצייה צריך להגדיר שני ארגומנטים: הראשון גובה השמש במעלות תחת האופק (בתוך סטרינג) להגדרת שקיעה. השני הוא אובייקט טיים-דלטא של הזמן שאותו רוצים להוסיף
# הפונקצייה מחזירה מערך עם שלושה איברים: 1. שעת השקיעה בזמן מקומי. 2. הזמן (לאחר השקיעה) בשעון מקומי שעבורו חושב גובה השמש 3. גובה השמש בזמן של איבר מספר 2.   
# פונקצייה זו כרגע אינה בשימוש בחישוב זמני היום

# 1. הכנה לפונקצייה
# הגדרות טיים-דלטא עבור הגדרות שונות של מספר דקות לאחר השקיעה בהתקדמות חיובית
# לצורך התקדמות שלילית ללפני הזריחה צריך להגדיר אחרת את טיים-דלטא
TD_13_35 = timedelta(minutes=13.35)
TD_13_5 = timedelta(minutes=13.5)
TD_15 = timedelta(minutes=15)
TD_16_65 = timedelta(minutes=16.65)
TD_16_875 = timedelta(minutes=16.875)
TD_18 = timedelta(minutes=18)
TD_20 = timedelta(minutes=20)
TD_72 = timedelta(minutes=72)
TD_90 = timedelta(minutes=90)
TD_120 = timedelta(minutes=120)

# 2. הפונקצייה עצמה
def sunset_plus_minutes_alt(HORIZON,DELTA):
    city.date = CD 
    city.elevation = 0
    city.pressure = 0
    city.horizon = HORIZON
    AA = ephem.localtime(city.next_setting(ephem.Sun(), use_center=True))
# הגדרת זמן השקיעה בשעון גריניץ    
    BB = city.next_setting(ephem.Sun(), use_center=True).datetime()
# הגדרת זמן בשעון גריניץ של השקיעה שלעיל בתוספת מספר דקות לאחריה לפי ההדקות בדלתא שהוגדרה לעיל, וביצוע כל החישובים על זמן זה.
    CC = BB + DELTA
    city.date = DD
    DD = ephem.localtime(city.date)
    s.compute(city)
    EE = round(s.alt / pi * 180.0, 3)
# איפוס האופק, הזמן והחישוב הכללי למצב שהיה לפני הקריאה לפונקצייה        
    city.date = CD 
    city.horizon = H_0
    s.compute(city)    
    return [AA,DD,EE]

#-------------------------------------------------------------------------------

# חישובים מעלות השחר ועד הנץ לפי שיטות שונות, באמצעות הגדרת האופק לגובה המתאים בפונקציית החישוב

rise_25_9 = horizon_next_rise(H_25_9)
rise_19_75 = horizon_next_rise(H_19_75)
rise_18 = horizon_next_rise(H_18)
rise_15_99 = horizon_next_rise(H_15_99)
rise_15_194 = horizon_next_rise(H_15_194)
rise_12 = horizon_next_rise(H_12)
rise_10_2 = horizon_next_rise(H_10_2)
rise_0_833 = horizon_next_rise(H_0_833)
rise_0 = horizon_next_rise(H_0)
rise_HP_1_5 = horizon_next_rise(HP_1_5)

# חישובים מהשקיעה ועד סוף בין השמשות לפי שיטות שונות, באמצעות הגדרת האופק לגובה המתאים בפונקציית החישוב

set_0 = horizon_next_set(H_0)
set_0_833 = horizon_next_set(H_0_833)
set_1_37 = horizon_next_set(H_1_37)
set_3_65 = horizon_next_set(H_3_65)
set_4_239 = horizon_next_set(H_4_239)
set_4_37 = horizon_next_set(H_4_37)
set_4_61 = horizon_next_set(H_4_61)
set_6 = horizon_next_set(H_6)
set_8_5 = horizon_next_set(H_8_5)
set_12 = horizon_next_set(H_12)
set_15_194 = horizon_next_set(H_15_194)
set_15_99 = horizon_next_set(H_15_99)
set_18 = horizon_next_set(H_18)
set_19_75 = horizon_next_set(H_19_75)
set_25_9 = horizon_next_set(H_25_9)


# חישוב חצות היום והלילה

city.elevation = 0
city.pressure = 0
city.horizon = '0'
transit = ephem.localtime(city.next_transit(ephem.Sun()))
antitransit = ephem.localtime(city.next_antitransit(ephem.Sun()))

#-------------------------------------------------------

# אופציונאלי, לשילוב נתונים על הירח בלוח הזמנים היומי
m = ephem.Moon()
m.compute(city)

# הגדרת שני משתנים ששומרים את הזריחה הגיאומטרית ואת השקיעה הגיאומטרית של הירח
MR = ephem.localtime(city.next_rising(ephem.Moon(), use_center=True))
MS = ephem.localtime(city.next_setting(ephem.Moon(), use_center=True))
moon_transit = ephem.localtime(city.next_transit(ephem.Moon()))

# חישוב אחוז התאורה של הירח
m_phase = m.phase

# חישוב אזימוט הירח בשעת זריחתו או שקיעתו
city.date = MR # or MM 
city.elevation = 0
city.pressure = 0
city.horizon = '0'
m_az = round(m.az / pi * 180.0, 1)

#-----------------------------------------------------------------------------

# הדפסת כל זמני היום ההלכתיים

# דוגמא להדפסה לא מושלמת
# שיעורי המעלות תחת האופק עבור כל זמן הלכתי נלקחו מתוך הקדמת ספר זמני ההלכה למעשה של הרב ידידיה מנת
# אמנם לגבי עלות השחר: בלוח עיתים לבינה נזכר שיעור של מינוס 16.02 מעלות במקום 15.99. דבר אחד ברור: 16.1 זו וודאי טעות ברורה.

print("")
#print(f'לפניכם רשימת זמני היום ההלכתיים מהבוקר ללילה, עבור תאריך לועזי: {greg_day}-{greg_month}-{greg_year}')
print("")
print("")

print("דמדומי בוקר")
print("")
print(f'עלות השחר לחומרא, מינוס 25.9 מעלות (לפי הילוך 4 מיל של 24. מחושב לפי שיטת הרמבם בהילוך מיל): {rise_25_9[2].strftime("%H:%M:%S")}')
print(f'עלות השחר לחומרא, מינוס 19.75 מעלות (לפי הילוך 4 מיל של 22.5. גר"א): {rise_19_75[2].strftime("%H:%M:%S")}')
print(f'תחילת דמדומים אסטרונומיים, מינוס 18 מעלות: {rise_18[2].strftime("%H:%M:%S")}')
print(f'עלות השחר לחומרא, מינוס 15.99 מעלות (לפי הילוך 4 מיל של 18. לפני זריחה הלכתית. שו"ע? גר"א?): {rise_15_99[2].strftime("%H:%M:%S")}')
print(f'עלות השחר לחומרא, מינוס 15.194 מעלות (לפי הילוך 4 מיל של 18. לפני זריחה גיאומטרית. רמב"ם פיה"מ ברכות א,א): {rise_15_194[2].strftime("%H:%M:%S")}')
print(f'עלות השחר לקולא, תחילת דמדומים ימיים - מינוס 12 מעלות (האיר כל המזרח): {rise_12[2].strftime("%H:%M:%S")}')
print(f'משיכיר את חבירו, מינוס 10.2 מעלות: {rise_10_2[2].strftime("%H:%M:%S")}')
print("")
print("")

print("הנץ")
print("")
print(f'הנץ מישורי כולל רפרקציה ממוצעת, מינוס 0.833 מעלות (הנץ הלכתי לחומרא): {rise_0_833[2].strftime("%H:%M:%S")}')
print(f'הנץ גיאומטרי, מרכז השמש 0 מעלות (לחישובי שעות זמניות): {rise_0[2].strftime("%H:%M:%S")}')
############print(f'אזימוט השמש בשעת הזריחה הגאומטרית: {}')
print(f'בערך: הנץ הנראה במודיעין עילית בגלל הסתרת ההרים, לתפילה או לקולא, פלוס 1.5 מעלות: {rise_HP_1_5[2].strftime("%H:%M:%S")}')
print("")
print("")

print("שעות זמניות")
print(f'מספר הדקות לשעה זמנית ביום זה 3: {TH}')
print("")
print(f'סוף זמן קריאת שמע, שעה זמנית 3: {TH3.strftime("%H:%M:%S")}')
print(f'סוף זמן תפילה, שעה זמנית 4: {TH4.strftime("%H:%M:%S")}')
print(f'סוף זמן ביעור חמץ בערב פסח, שעה זמנית 5 (סוף זמן אכילת חמץ שווה לסוף זמן תפילה): {TH5.strftime("%H:%M:%S")}')
print(f'חצות היום (השמש בשיא גובהה היומי): {transit.strftime("%H:%M:%S")}')
print(f'מנחה גדולה, שעה זמנית 6.5: {TH6_5.strftime("%H:%M:%S")}')
print(f'סוף זמן מוסף לכתחילה, שעה זמנית 7: {TH7.strftime("%H:%M:%S")}')
print(f'סמוך למנחה קטנה, סוף זמן קביעת סעודה בערב שבת וחג, שעה זמנית 9: {TH9.strftime("%H:%M:%S")}')
print(f'מנחה קטנה, שעה זמנית 9.5: {TH9_5.strftime("%H:%M:%S")}')
print(f'פלג המנחה, שעה זמנית רבע ל-11: {TH10_75.strftime("%H:%M:%S")}')
print("")
print("")


#-------------------------------------------------------
# שיטה אחרת לסידור והדפסת שעות זמניות שימו לב שכאן לא מופיע חצות לפי טרנזיט


'''print("שעות זמניות")
print("")
print(f' אורך שעה זמנית בדקות: {round(arr_th[0],1)}')
print(f' שעה זמנית 0 (אמור להיות זריחה גיאומטרית): {str(arr_th[1])[11:19]}')
print(f' שעה זמנית 1: {str(arr_th[2])[11:19]}')
print(f' שעה זמנית 2: {str(arr_th[3])[11:19]}')
print(f' שעה זמנית 3 (סוף זמן קריאת שמע): {str(arr_th[4])[11:19]}')
print(f' שעה זמנית 4 (סוף זמן תפילה, וסוף זמן אכילת חמץ בערב פסח): {str(arr_th[5])[11:19]}')
print(f' שעה זמנית 5 (סוף זמן ביעור חמץ בערב פסח): {str(arr_th[6])[11:19]}')
print(f' שעה זמנית 6 (אמור להיות חצות היום): {str(arr_th[7])[11:19]}')
print(f' שעה זמנית 6.5 (אמור להיות מנחה גדולה): {str(arr_th[8])[11:19]}')
print(f' שעה זמנית 7 (סוף זמן תפילת מוסף לכתחילה): {str(arr_th[9])[11:19]}')
print(f' שעה זמנית 8: {str(arr_th[10])[11:19]}')
print(f' שעה זמנית 9 (סמוך למנחה קטנה, סוף זמן קביעת סעודה בערב שבת וחג): {str(arr_th[11])[11:19]}')
print(f' שעה זמנית 9.5 (מנחה קטנה): {str(arr_th[12])[11:19]}')
print(f' שעה זמנית 10: {str(arr_th[13])[11:19]}')
print(f' שעה זמנית 10.75 (פלג המנחה): {str(arr_th[14])[11:19]}')
print(f' שעה זמנית 11: {str(arr_th[15])[11:19]}')
print(f' שעה זמנית 12 (אמור להיות שקיעה גיאומטרית): {str(arr_th[16])[11:19]}')
print("")
print("")'''


#----------------------------------------


print("שקיעה")
print("")
print(f'שקיעה גיאומטרית, מרכז השמש 0 מעלות (לחישובי שעות זמניות): {set_0[2].strftime("%H:%M:%S")}')
############print(f'אזימוט השמש בשעת השקיעה הגאומטרית: {}')
print(f'שקיעה מישורית כולל רפרקציה ממוצעת, מינוס 0.833 מעלות (שקיעת החמה לחומרא): {set_0_833[2].strftime("%H:%M:%S")}')
print(f'בערך: שקיעה נראית במודיעית עילית בגלל הגובה, מינוס 1.5 מעלות: {set_1_37[2].strftime("%H:%M:%S")}')
print("")
print("")

print("צאת הכוכבים")
print("")
print(f'צאת שלושה כוכבים לפי הילוך מיל 18 (מחושב לפי שקיעה הלכתית ביום בינוני), מינוס 3.65 מעלות (שו"ע): {set_3_65[2].strftime("%H:%M:%S")}')
print(f'עשרים דקות (שליש שעה) לאחר שקיעה גיאומטרית ביום בינוני, מינוס 4.239 מעלות (רמב"ם תרומות ז,ב; קידוש החודש יד,ו): {set_4_239[2].strftime("%H:%M:%S")}')
print(f'צאת שלושה כוכבים לפי הילוך מיל 22.5, מינוס 4.37 מעלות (גר"א?): {set_4_37[2].strftime("%H:%M:%S")}')
print(f'צאת שלושה כוכבים לפי הילוך מיל 24, מינוס 4.61 מעלות (רמב"ם): {set_4_61[2].strftime("%H:%M:%S")}')
print(f'צאת שלושה כוכבים קטנים רצופים, מינוס 6 מעלות (בחגורת הצייד, לדעתי מוצאי שבת לחומרא): {set_6[2].strftime("%H:%M:%S")}')
print(f'צאת שבת הרב טוקצינסקי, מינוס 8.5 מעלות (מקובל בלוחות): {set_8_5[2].strftime("%H:%M:%S")}')
print("")
print("")
print("דמדומי ערב")
print("")
print(f'סוף דמדומים ימיים, מינוס 12 מעלות: {set_12[2].strftime("%H:%M:%S")}')
print(f'צאת כל הכוכבים, רבינו תם, מינוס 15.99 או מעלות, (לפי הילוך 4 מיל של 18 משקיעה הלכתית): {set_15_99[2].strftime("%H:%M:%S")}')
print(f'צאת כל הכוכבים, רבינו תם, מינוס 15.194 מעלות (לפי הילוך 4 מיל של 18. משקיעה גיאומטרית ): {set_15_194[2].strftime("%H:%M:%S")}')
print(f'סוף דמדומים אסטרונומיים, מינוס 18 מעלות: {set_18[2].strftime("%H:%M:%S")}')
print(f'צאת כל הכוכבים, רבינו תם, מינוס 19.75 מעלות, (לפי הילוך 4 מיל של 22.5): {set_19_75[2].strftime("%H:%M:%S")}')
print(f'צאת כל הכוכבים, רבינו תם, מינוס 25.9 מעלות, (לפי הילוך 4 מיל של 24 מחושב לפי שיטת הרמב"ם בהילוך מיל): {set_25_9[2].strftime("%H:%M:%S")}')
print("")
print("")

print("חצות הלילה")
print("")
print(f'חצות לילה, השמש בשיא תחתית גובהה: {antitransit.strftime("%H:%M:%S")}')
# דוגמא נוספת להדפסה בלי חלקי שניות
print(f'חצות לילה, השמש בשיא תחתית גובהה: {str(antitransit)[:19]}')
#------------------------------------------------------------------------------



# In[2]:


# מידע על מולדות ממוצעים ואמיתיים לכל חודשי השנה
# לזכור להמיר לשעון ישראל זמן מקומי אבל את מולד ממוצע כנראה שלא צריך להמיר או שצריך להמיר לפי שיטת הרב מרצבך?


# מתודות זמינות על הירח

# מולד הירח האמיתי הקודם והבא
ephem.previous_new_moon('2022/07/20')
ephem.next_new_moon('2020/01/01')

# ירח מלא הקודם והבא
ephem.previous_full_moon('2020/01/01')
ephem.next_full_moon('2020/01/01')

# רבע ראשון של הירח הקודם והבא
ephem.previous_first_quarter_moon('2020/01/01')
ephem.next_first_quarter_moon('2020/01/01')

# רבע אחרון של הירח הקודם והבא
ephem.previous_last_quarter_moon('2020/01/01')
ephem.next_last_quarter_moon('2020/01/01')


# מידע על תקופות שנתי: שמואל, רב אדא, ואמיתי ואולי גם על ברכת החמה
# לזכור שצריך להמיר הכל לשעון ישראל זמן מקומי



# מתודות זמינות עבור חישוב התקופות האמיתיות כגון ימי השיוון היום הארוך והיום הקצר 
# בסוגריים צריך להכניס את השנה כסטרינג בין גרשים ואפשר גם להכניס את התאריך המלא או אובייקט דייטטיים


# היום הקצר ביותר או היום הארוך ביותר, הקודם והבא
# ephem.previous_solstice('2020')
ephem.previous_solstice('2020/10/19')
ephem.next_solstice('2020/10/19')

# יום מפנה הקיץ ויום מפנה החורף הקודם והבא
ephem.previous_winter_solstice('2020/10/19')
ephem.next_winter_solstice('2020/10/19')
ephem.next_summer_solstice('2020/10/19')
ephem.previous_summer_solstice('2020/10/19')

# יום השיוויון הקודם ויום השיוון הבא
ephem.previous_equinox('2020/10/19')
ephem.next_equinox('2020/10/19')

# יום השיוויון הסתווי? הקודם ויום השיוון הסתווי? הבא
ephem.previous_vernal_equinox('2020/10/19')
ephem.next_vernal_equinox('2020/10/19')

# יום השיוויון האביבי? הקודם ויום השיוון האביבי? הבא
ephem.previous_spring_equinox('2020/10/19')
ephem.next_spring_equinox('2020/10/19')

# דוגמא להדפסה, כי בלי הדפסה יוצא פורמט עשרוני לא ברור
print(ephem.previous_solstice('2020/10/19'))


# In[ ]:


############ בסוף לעשות דבר כזה גם על הירח האחרון בחודש #############


# כל החישובים נעשים לפי שעון גריניץ, כי כך אייפם בנוי. רק לבסוף הנתונים ממומרים לשעון מקומי של ישראל

# יבוא חבילות נדרשות

# החבילה הכללית של איפם לחישובים אסטרונומיים
import ephem

# חבילת פי דרושה לשם המרה מ-רדיאנים ל-מעלות זוית
from math import pi

# חבילה לתאריכים
import datetime
from datetime import datetime, timedelta

# יבוא חבילת לוח עברי בפייתון
from pyluach import dates, hebrewcal, parshios

# יבוא חבילת תמיכה באזורי זמן
from zoneinfo import ZoneInfo
from pytz import timezone
import pytz


#-----------------------------------------------------
# הגדרת משתנה של תאריך שממנו והלאה יש לבצע חיפוש אחר מולד הירח הבא
DATE = '2022/09/20'

#----------------------------------------
# הגדרת אזור זמן של ישראל 

israel = timezone('Israel')

#-----------------------------------------------

# חישוב רגע מולד הירח האמיתי לפי שעון גריניץ ולפי שעון ישראל

new_moon = ephem.next_new_moon(DATE)
tz_new_moon = ephem.to_timezone(new_moon, israel)

#----------------------------------------------------------


# חישוב קשת הראייה כלומר כמה זמן יהיה בין שקיעת השמש לשקיעת הירח 24 שעות לאחר המולד האמיתי
# קשת הראייה שכתוב ברמב"ם במעלות הוא לאחר שאורך השמש והירח תוקן שם לאורך של מעלות משווניות שבהן כל מעלה שוקעת במשך 4 דקות
# לכן, 9 מעלות כפול 4 דקות למעלה שווה 36 דקות, 
# ולכן קשת ראייה של 9 מעלות שזו הקשת המינימלית המאפשרת ראייה לפי הרמב"ם שווה לשלושים ושש דקות הפרש בין שקיעת השמש לשקיעת הירח
# באותו אופן, קשת הראייה המקסימלי לפי הרמב"ם הוא 15 מעלות שזה שווה ל 60 דקות הפרש בין השקיעות
# פחות מתשע מעלות הפרש בין השקיעות הירח לא ייראה כלל ויותר מ 15 מעלות הירח וודאי ייראה
# בין 9 ל 15 מעלות זה כבר תלוי בכמה מעלות הוא האורך הראשון שמייצג את עובי סהר הירח

# הערה חשובה כללית: כל הזמנים שהתוכנה איפם עובדת איתם הם לפי שעון גריניץ. אפשר להמיר אחר כך לשעון מקומי
# שעון קיץ ישראל ממהר בשלוש שעות משעון גריניץ, ושעון חורף ממהר בשעתיים 

#--------------------------------------------------------------------------------

# הגדרת אובייקט "אובסרבר" שמחזיק את כל המידע על מיקום ועל התאריך והשעה ועוד

city = ephem.Observer()
# הגדרת עידן כללי לדוגמא לגבי היותו של פולאריס ככוכב הצפון, בעידן שנים אחר היה/יהיה כוכב צפון אחר
city.epoch = '2000/1/1 12:00:00'
# הגדרת תאריך ושעה למיקום מסויים. אם לא מגדירים כלום, כל הרצה של הקוד לוקחת מחדש תאריך ושעה של אותו רגע לפי שעון גריניץ
city.date = new_moon
# הגדרת קו אורך של המיקום, כרגע מוגדר על מודיעין עילית-ישראל
city.lon = '35.045174'
# הגדרת קו רוחב של המיקום, כרגע מוגדר על מודיעין עילית-ישראל
city.lat = '31.941692'
# הגדרת השם של המקום שהוזן
city.name = 'modiin-illit, israel'
# הגדרת גובה המיקום מעל פני הים. אם לא מגדירים כלום ברירת המחדל היא גובה 0 בדרך כלל הגדרת גובה אמיתי מעוותת את נתוני הזריחה והשקיעה
city.elevation = 0
# הגדרת גובה מעל או מתחת לאופק. שימושי לגבי חישוב רפרקציה או לגבי חישוב צאת הכוכבים או לגבי חישוב דמדומים 
city.horizon = '0'
# הגדרת הטמפרטורה במעלות צלסיוס במיקום האובסרבר. אם לא מזינים כלום, ברירת המחדל היא 15 מעלות צלסיוס. בכוונה הזנתי 0 כדי לשלוט על הרפרקציה דרך הגדרת הוריזון
city.temp = 0
# הגדרת לחץ האויר במיליבר במיקום האובסרבר. אם לא מזינים כלום, ברירת המחדל היא 1010 מיליבר. בכוונה הזנתי 0 כדי לשלוט על הרפרקציה דרך הגדרת הוריזון
city.pressure = 0

# חישוב הרפרקציה של האטמוספרה נעשה לפי לחץ האויר. כדי לכבות את הרפרקציה יש להגדיר על אפס
# אם רוצים לחשב רפרקציה אחרת צריך להגדיר את לחץ האויר על 0 ולחשב את הרפרקציה באמצעות הגדרת אופק מתאים
# לדוגמא: רפרקציה ממוצעת מחושבת באמצעות אופק של -0.8333

#-------------------------------------------------------------------------------------

# חישובי הזריחה אינם חלק מחישוב ראייה ראשונה של הירח החדש, אלא הם הכנה עתידית לחישוב ראייה אחרונה של הירח הישן


# הגדרת משתנים ששומרים את הזריחה הגיאומטרית ואת השקיעה הגיאומטרית של השמש הבאים לאחר המולד האמיתי
#SR = city.next_rising(ephem.Sun(), use_center=True)
#tz_SR = ephem.to_timezone(SR, israel)

SS = city.next_setting(ephem.Sun(), use_center=True)
tz_SS = ephem.to_timezone(SS, israel)



# הגדרת משתנים ששומרים את הזריחה הגיאומטרית ואת השקיעה הגיאומטרית של הירח הבאים לאחר המולד האמיתי

#MR = city.next_rising(ephem.Moon(), use_center=True)
#tz_SR = ephem.to_timezone(MR, israel)

MS = city.next_setting(ephem.Moon(), use_center=True)
tz_MS = ephem.to_timezone(MS, israel)




# חישוב השרות שזהו זמן בין שקיעת השמש לשקיעה הירח וחישוב קשת הראייה הנגזרת מהם
 
SHERUT = (MS.datetime() - SS.datetime()).seconds / 60

KESHET_REIYA = SHERUT / 4

# גיל הירח בשעות מהמולד האמיתי עד השקיעה הגיאומטרית ביום הראייה
AGE = SS.datetime() - new_moon.datetime()
AGE = (AGE.days * 24) + ((AGE.seconds / 60) / 60)

#--------------------------------------------------------------

# חישוב שעת הראייה לפי השעה שבה השמש נמצאת ארבע וחצי מעלות תחת האופק

city.horizon = "-4.5"
SS_4_5 = city.next_setting(ephem.Sun(), use_center=True)

tz_SS_4_5 = ephem.to_timezone(SS_4_5, israel)


#------------------------------------------------------------------


# הגדרת השמש באיפם
s = ephem.Sun()

# הגדרת הירח באיפם
m = ephem.Moon()

# חישובים שונים על השמש והירח בשעת הראייה
city.horizon = "0"
city.date = SS_4_5

s.compute(city)
m.compute(city)

# חישוב אחוז התאורה של הירח בשעת הראייה
m_phase = m.phase

# חישוב גובה הירח בשעת הראייה
m_alt = m.alt / pi * 180.0

# חישוב אזימוט הירח בשעת הראייה

m_az = round(m.az / pi * 180.0, 1)

# הגדרה שרוצים לקבל מיקום אקליפטי של השמש ושל הירח בשעת הראייה (מקום השמש האמיתי ומקום הירח האמיתי), ולהסיק מכך את הארך הראשון
s_Ecliptic = ephem.Ecliptic(s)
m_Ecliptic = ephem.Ecliptic(m)

ORECH_RISHON = (m_Ecliptic.lon - s_Ecliptic.lon) / pi * 180.0


#------------------------------------------------


#הרמב"ם עצמו מחשב את קשת הראייה על פני עלייה ישרה (קו אורך) במערכת קואורדינטות משוונית
# המערכת המשוונית היא מתאימה לכל מקום בעולם, ומעלה אחת בה שווה ל 4 דקות
# כל זה כנראה לא נכון
# s_RA = s.ra / pi * 180.0
# m_RA = m.ra / pi * 180.0





#----------------------------------------------------------------------



#----------------------------------------------------------------------
# הדפסות


# דרך להגדיר כמה אפסים יודפסו כמרידיאנים
# print('%.10f' % (s.alt))

# אחוז תאורה של הירח במולד אמיתי
#  עם הגדרת הדפסה רק של 6 אפסים
# print('%.6f' % (m.moon_phase))

print(f'התאריך והשעה של המולד האמיתי לפי שעון גריניץ: {new_moon}')
print(f'התאריך והשעה של המולד האמיתי לפי שעון ישראל: {tz_new_moon}')
# print(f'שקיעה גיאומטרית של השמש ביום המולד האמיתי: {}')
print(f'התאריך שעבורו בוצעו החישובים: {tz_SS.date()}')
print(f'שקיעה גיאומטרית של השמש ביום זה לפי שעון ישראל: {tz_SS.time()}')
print(f'שקיעה גיאומטרית של הירח ביום זה לפי שעון ישראל: {tz_MS.time()}') #.strftime("%H:%M:%S")
print(f'ההפרש בדקות בין שקיעה גיאומטרית של השמש לבין שקיעה גיאומטרית של הירח: {SHERUT}') #.strftime("%H:%M:%S")
print(f'שעת הראייה, שהיא השעה שהשמש נמצאת ארבע וחצי מעלות תחת האופק לפי שעון ישראל: {tz_SS_4_5.time()}') #.strftime("%H:%M:%S")
print(f'גיל הירח בשעות מהמולד האמיתי עד השקיעה הגיאומטרית ביום הראייה: {AGE}') #.strftime("%H:%M:%S")
# אולי להוסיף מולד ממוצע והפרש בין מולד ממוצע לאמיתי
print("כל החישובים מכאן והלאה בוצעו עבור שעת הראייה")
# הדפסה במעלות של האורך האקליפטי
print('אורך השמש במעלות: {:.4f}'.format(s_Ecliptic.lon / pi * 180.0))
print('אורך הירח במעלות: {:.4f}'.format(m_Ecliptic.lon / pi * 180.0))
print('אורך ראשון של הירח במעלות: {:.4f}'.format(ORECH_RISHON))
#print(f'אורך ראשון של הירח במעלות: {round(ORECH_RISHON, 2)}')
print(f'קשת הראייה במעלות: {KESHET_REIYA}') #.strftime("%H:%M:%S")
print(f'סכום קיצי הראייה, כלומר האורך הראשון וקשת הראייה יחד : {ORECH_RISHON + KESHET_REIYA}') #.strftime("%H:%M:%S")
print(f'גובה הירח מעל האופק במעלות: {m_alt}') #.strftime("%H:%M:%S")
print(f'אזימוט הירח במעלות מהצפון: {m_az}')
print(f'אחוזי התאורה של הירח: {m_phase}') #.strftime("%H:%M:%S")



# הדפסה רגילה של האורך האקליפטי
# print('%s' % (S_Ecliptic.lon))
# print('%s' % (M_Ecliptic.lon))



# print('מקום השמש האמיתי (0°–360°): {0:.1f}'.format(S_Ecliptic.lon / pi * 180.0))
# print('מקום הירח האמיתי (0°–360°): {0:.1f}'.format(M_Ecliptic.lon / pi * 180.0))
# print('אורך ראשון של הירח (0°–360°): {0:.1f}'.format(ORECH_RISHON))

#--------------------------------------------------------------------

# קריטריונים של הרמב"ם


# היתכנות ראייה לפי אורך ראשון (פרק יז, הלכות ג-ד)

if m_Ecliptic.lon / pi * 180.0 > 270 or m_Ecliptic.lon / pi * 180.0 < 90:
    if ORECH_RISHON <= 9:
        print('לפי קריטריון הראייה של הרמב"ם, האורך הראשון קטן מ-9 ולכן הירח לא ייראה ביום זה בארץ ישראל')
    elif ORECH_RISHON >= 15:
        print('לפי קריטריון הראייה של הרמב"ם, האורך הראשון גדול מ-15 ולכן הירח צפוי להיראות ביום זה בארץ ישראל')
elif m_Ecliptic.lon / pi * 180.0 < 270 or m_Ecliptic.lon / pi * 180.0 > 90:
    if ORECH_RISHON <= 10:
        print('לפי קריטריון הראייה של הרמב"ם, האורך הראשון קטן מ-10 ולכן הירח לא ייראה ביום זה בארץ ישראל')
    elif ORECH_RISHON > 24:
        print('לפי קריטריון הראייה של הרמב"ם, האורך הראשון גדול מ-24 ולכן הירח צפוי להיראות ביום זה בארץ ישראל')
else:
    # היתכנות ראייה לפי קיצי הראייה כאשר האורך הראשון וקשת הראייה נמצאים בגבולות הספק (פרק יז, הלכות יז-כא)
    if ORECH_RISHON + KESHET_REIYA < 22:
        print('לפי קריטריון הראייה של הרמב"ם, האורך הראשון נמצא בגבולות הספק (9-15 או 10-24) וקיצי הראייה הם מתחת 22 ולכן הירח לא ייראה ביום זה בארץ ישראל')
    else:
         print('לפי קריטריון הראייה של הרמב"ם, האורך הראשון נמצא בגבולות הספק (9-15 או 10-24) אך קיצי הראייה הם מעל 22 ולכן הירח צפוי להיראות ביום זה בארץ ישראל')



# היתכנות ראייה לפי קשת ראייה (פרק יז, הלכות טו-טז)

if KESHET_REIYA <= 9:
    print('לפי קריטריון הראייה של הרמב"ם, קשת הראייה קטנה מ-9 ולכן הירח לא ייראה ביום זה בארץ ישראל')

elif KESHET_REIYA >= 15:
    print('לפי קריטריון הראייה של הרמב"ם, קשת הראייה גדולה מ-15 ולכן הירח צפוי להיראות ביום זה בארץ ישראל')
else:
    # היתכנות ראייה לפי קיצי הראייה כאשר האורך הראשון וקשת הראייה נמצאים בגבולות הספק (פרק יז, הלכות יז-כא)
    if ORECH_RISHON + KESHET_REIYA < 22:
        print('לפי קריטריון הראייה של הרמב"ם, קשת הראייה נמצאת בגבולות הספק (9-15) וקיצי הראייה הם מתחת 22 ולכן הירח לא ייראה ביום זה בארץ ישראל')
    else:
         print('לפי קריטריון הראייה של הרמב"ם, קשת הראייה נמצאת בגבולות הספק (9-15) אך קיצי הראייה הם מעל 22 ולכן הירח צפוי להיראות ביום זה בארץ ישראל')


#----------------------------------------------------------------------
# קריטריונים שלי

# הקריטריון שלי מבוסס על "שעת הראייה" שהיא השעה שהשמש נמצאת 4.5 מעלות תחת האופק

# הקריטריונים שלי הם לגבי ראייה בעין אך לראייה במשקפת דרושים קריטריונים אחרים.
# גם הקריטריונים שננתי פה הם לא מדוייקים. צריך לדייק אותם בעזרת תצפיות
# וגם צריך להכניס לקריטריונים שלי דרגות קושי, מתי יהיה קל מאוד ומתי קשה מאוד וכדומה


# היתכנות ראייה לפי אחוז תאורה שזהו נתון מקביל לאורך ראשון ואולי אפילו מעט מדוייק יותר
if m_phase <= 1:
    print('לפי קריטריון הראייה שלי, אחוזי התאורה של הירח קטנים מ-1 ולכן הירח לא ייראה ביום זה בארץ ישראל')
elif m_phase >= 2:
    print('לפי קריטריון הראייה שלי, אחוזי התאורה של הירח גדולים מ-3 ולכן הירח צפוי להיראות ביום זה בארץ ישראל')
else:
    # היתכנות ראייה לפי גובה הירח מעל האופק כאשר אחוזי התאורה של הירח נמצאים בגבולות הספק
    if m_alt < 4.5:
        print('לפי קריטריון הראייה שלי, אחוזי התאורה של הירח נמצאים בגבולות הספק (1-2) וגובה הירח מעל האופק בשעת הראייה קטן מ-4.5 מעלות, ולכן הירח לא ייראה ביום זה בארץ ישראל')
    else:
         print('לפי קריטריון הראייה שלי, אחוזי התאורה של הירח נמצאים בגבולות הספק (1-2), אך גובה הירח מעל האופק בשעת הראייה גדול מ-4.5 מעלות, ולכן הירח צפוי להיראות ביום זה בארץ ישראל')



# היתכנות ראייה לפי גובה הירח מעל האופק

if m_alt <= 3:
    print('לפי קריטריון הראייה שלי, גובה הירח מעל האופק בשעת הראייה קטן מ-3 מעלות ולכן הירח לא ייראה ביום זה בארץ ישראל')

elif m_alt >= 6:
    print('לפי קריטריון הראייה שלי, גובה הירח מעל האופק בשעת הראייה גדול מ-6 מעלות ולכן הירח צפוי להיראות ביום זה בארץ ישראל')
else:
    # היתכנות ראייה לפי אחוזי התאורה של הירח, כאשר גובה הירח מעל האופק נמצא בגבולות הספק
    if m_phase < 1:
        print('לפי קריטריון הראייה שלי, גובה הירח מעל האופק בשעת הראייה נמצא בגבולות הספק (3-6) ואחוזי התאורה של הירח קטנים מ-1 ולכן הירח לא ייראה ביום זה בארץ ישראל')
    else:
         print('לפי קריטריון הראייה שלי, גובה הירח מעל האופק בשעת הראייה נמצא בגבולות הספק (3-6) אך אחוזי התאורה של הירח גדולים מ-1, ולכן הירח צפוי להיראות ביום זה בארץ ישראל')





# In[ ]:




